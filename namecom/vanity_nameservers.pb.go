// Code generated by protoc-gen-go. DO NOT EDIT.
// source: namecom/vanity_nameservers.proto

package namecom

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VanityNameserver struct {
	// Domain_name is the
	DomainName string   `protobuf:"bytes,2,opt,name=domain_name" json:"domain_name,omitempty"`
	Hostname   string   `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
	Ips        []string `protobuf:"bytes,4,rep,name=ips" json:"ips,omitempty"`
}

func (m *VanityNameserver) Reset()                    { *m = VanityNameserver{} }
func (m *VanityNameserver) String() string            { return proto.CompactTextString(m) }
func (*VanityNameserver) ProtoMessage()               {}
func (*VanityNameserver) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *VanityNameserver) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *VanityNameserver) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *VanityNameserver) GetIps() []string {
	if m != nil {
		return m.Ips
	}
	return nil
}

type ListVanityNameserversRequest struct {
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
	// Per Page is the number of records to return per request. Per Page defaults to 1,000.
	PerPage int32 `protobuf:"varint,2,opt,name=per_page" json:"per_page,omitempty"`
	// Page is which page to return
	Page int32 `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
}

func (m *ListVanityNameserversRequest) Reset()                    { *m = ListVanityNameserversRequest{} }
func (m *ListVanityNameserversRequest) String() string            { return proto.CompactTextString(m) }
func (*ListVanityNameserversRequest) ProtoMessage()               {}
func (*ListVanityNameserversRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *ListVanityNameserversRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *ListVanityNameserversRequest) GetPerPage() int32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *ListVanityNameserversRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ListVanityNameserversResponse struct {
	VanityNameservers []*VanityNameserver `protobuf:"bytes,1,rep,name=vanity_nameservers" json:"vanity_nameservers,omitempty"`
	// Next_page is the identifier for the next page of results. It is only populated if there is another page of results after the current page.
	NextPage int32 `protobuf:"varint,2,opt,name=next_page" json:"next_page,omitempty"`
	// Last_page is the identifier for the final page of results. It is only populated if there is another page of results after the current page.
	LastPage int32 `protobuf:"varint,3,opt,name=last_page" json:"last_page,omitempty"`
}

func (m *ListVanityNameserversResponse) Reset()                    { *m = ListVanityNameserversResponse{} }
func (m *ListVanityNameserversResponse) String() string            { return proto.CompactTextString(m) }
func (*ListVanityNameserversResponse) ProtoMessage()               {}
func (*ListVanityNameserversResponse) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *ListVanityNameserversResponse) GetVanityNameservers() []*VanityNameserver {
	if m != nil {
		return m.VanityNameservers
	}
	return nil
}

func (m *ListVanityNameserversResponse) GetNextPage() int32 {
	if m != nil {
		return m.NextPage
	}
	return 0
}

func (m *ListVanityNameserversResponse) GetLastPage() int32 {
	if m != nil {
		return m.LastPage
	}
	return 0
}

type GetVanityNameserverRequest struct {
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
	Hostname   string `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
}

func (m *GetVanityNameserverRequest) Reset()                    { *m = GetVanityNameserverRequest{} }
func (m *GetVanityNameserverRequest) String() string            { return proto.CompactTextString(m) }
func (*GetVanityNameserverRequest) ProtoMessage()               {}
func (*GetVanityNameserverRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *GetVanityNameserverRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *GetVanityNameserverRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type CreateVanityNameserverRequest struct {
	DomainName       string            `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
	VanityNameserver *VanityNameserver `protobuf:"bytes,2,opt,name=vanity_nameserver" json:"vanity_nameserver,omitempty"`
}

func (m *CreateVanityNameserverRequest) Reset()                    { *m = CreateVanityNameserverRequest{} }
func (m *CreateVanityNameserverRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateVanityNameserverRequest) ProtoMessage()               {}
func (*CreateVanityNameserverRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *CreateVanityNameserverRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *CreateVanityNameserverRequest) GetVanityNameserver() *VanityNameserver {
	if m != nil {
		return m.VanityNameserver
	}
	return nil
}

type DeleteVanityNameserverRequest struct {
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
	Hostname   string `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
}

func (m *DeleteVanityNameserverRequest) Reset()                    { *m = DeleteVanityNameserverRequest{} }
func (m *DeleteVanityNameserverRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteVanityNameserverRequest) ProtoMessage()               {}
func (*DeleteVanityNameserverRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *DeleteVanityNameserverRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *DeleteVanityNameserverRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func init() {
	proto.RegisterType((*VanityNameserver)(nil), "namecom.VanityNameserver")
	proto.RegisterType((*ListVanityNameserversRequest)(nil), "namecom.ListVanityNameserversRequest")
	proto.RegisterType((*ListVanityNameserversResponse)(nil), "namecom.ListVanityNameserversResponse")
	proto.RegisterType((*GetVanityNameserverRequest)(nil), "namecom.GetVanityNameserverRequest")
	proto.RegisterType((*CreateVanityNameserverRequest)(nil), "namecom.CreateVanityNameserverRequest")
	proto.RegisterType((*DeleteVanityNameserverRequest)(nil), "namecom.DeleteVanityNameserverRequest")
}

func init() { proto.RegisterFile("namecom/vanity_nameservers.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x4f, 0x6b, 0x13, 0x4f,
	0x18, 0xc7, 0x99, 0xa4, 0xbf, 0xfe, 0x9a, 0xc9, 0x41, 0x3b, 0xc5, 0xb8, 0xae, 0x09, 0x84, 0x91,
	0x96, 0x10, 0xca, 0x6e, 0x37, 0x8d, 0xed, 0x36, 0x14, 0x84, 0xb4, 0xa5, 0x08, 0xea, 0x61, 0xfd,
	0x73, 0xd0, 0x4a, 0x59, 0xcd, 0x18, 0x17, 0xb2, 0x3b, 0xeb, 0xce, 0x18, 0x5a, 0x4a, 0x2f, 0x82,
	0x20, 0xf1, 0x52, 0xac, 0x48, 0x05, 0xc1, 0x9b, 0xef, 0x20, 0x37, 0x5f, 0x81, 0x57, 0xdf, 0x82,
	0x2f, 0x44, 0x76, 0x36, 0xd9, 0xc4, 0xec, 0x1f, 0x69, 0xec, 0x25, 0x64, 0x67, 0x9f, 0x67, 0x9e,
	0xcf, 0xf3, 0x7d, 0xbe, 0xb3, 0x03, 0xcb, 0x8e, 0x69, 0x93, 0xe7, 0xd4, 0x56, 0xbb, 0xa6, 0x63,
	0xf1, 0xc3, 0x7d, 0xff, 0x91, 0x11, 0xaf, 0x4b, 0x3c, 0xa6, 0xb8, 0x1e, 0xe5, 0x14, 0xfd, 0x3f,
	0x88, 0x90, 0xaf, 0x0f, 0x43, 0x89, 0xed, 0xf2, 0x43, 0x8f, 0x30, 0x97, 0x3a, 0x8c, 0x04, 0x51,
	0x72, 0xb1, 0x4d, 0x69, 0xbb, 0x43, 0x54, 0xd3, 0xb5, 0x54, 0xd3, 0x71, 0x28, 0x37, 0xb9, 0x45,
	0x9d, 0xc1, 0x1e, 0xf8, 0x3b, 0x80, 0x97, 0x1f, 0x89, 0x02, 0xf7, 0xc2, 0xfd, 0xd1, 0x4d, 0x98,
	0x6f, 0x51, 0xdb, 0xb4, 0x1c, 0x51, 0x54, 0xca, 0x94, 0x41, 0x25, 0xd7, 0x5c, 0xe8, 0xf5, 0xa5,
	0x3c, 0x39, 0x30, 0x6d, 0xb7, 0x43, 0x14, 0xea, 0xb5, 0xcf, 0xfa, 0x12, 0x30, 0xc6, 0xe3, 0xd0,
	0x2a, 0x9c, 0x7b, 0x49, 0x19, 0x17, 0x39, 0x59, 0x91, 0x73, 0xb5, 0xd7, 0x97, 0x2e, 0x39, 0x4c,
	0x53, 0x26, 0xf3, 0xc2, 0x40, 0xb4, 0x09, 0xb3, 0x96, 0xcb, 0xa4, 0x99, 0x72, 0xb6, 0x92, 0x6b,
	0x56, 0x7b, 0x7d, 0x69, 0xe9, 0x09, 0xd6, 0x36, 0x6a, 0x8a, 0xb6, 0xa6, 0x2b, 0x9a, 0xa2, 0xe1,
	0x65, 0xfc, 0xa2, 0xb5, 0xa2, 0x35, 0xea, 0xfa, 0xda, 0x4a, 0xf0, 0xd3, 0xd0, 0x75, 0x5d, 0xc7,
	0x4f, 0x0d, 0x3f, 0x0d, 0xbf, 0x05, 0xb0, 0x78, 0xc7, 0x62, 0x7c, 0xb2, 0x05, 0x66, 0x90, 0x57,
	0xaf, 0x09, 0xe3, 0x93, 0xad, 0x80, 0xd8, 0x56, 0x4e, 0x22, 0xad, 0xc8, 0x70, 0xce, 0x25, 0xde,
	0xbe, 0x6b, 0xb6, 0x83, 0xf6, 0xff, 0x33, 0xc2, 0x67, 0x84, 0xe0, 0x8c, 0x58, 0xcf, 0x8a, 0x75,
	0xf1, 0x1f, 0x7f, 0x03, 0xb0, 0x94, 0xc0, 0x11, 0x0c, 0x03, 0xdd, 0x86, 0x28, 0x3a, 0x48, 0x09,
	0x94, 0xb3, 0x95, 0x7c, 0xed, 0x9a, 0x32, 0x18, 0xa0, 0x32, 0x99, 0x6f, 0xc4, 0x24, 0xa1, 0x22,
	0xcc, 0x39, 0xe4, 0x80, 0x8f, 0xd3, 0x8d, 0x16, 0xfc, 0xb7, 0x1d, 0x93, 0x0d, 0xde, 0x06, 0x8c,
	0xa3, 0x05, 0xfc, 0x0e, 0x40, 0x79, 0x97, 0x44, 0x38, 0xff, 0x51, 0xae, 0xf1, 0xc9, 0x67, 0x12,
	0x27, 0x7f, 0xf2, 0xc7, 0xe4, 0xf1, 0x57, 0x00, 0x4b, 0x5b, 0x1e, 0x31, 0x39, 0xb9, 0x60, 0x9a,
	0x5d, 0x38, 0x1f, 0x51, 0x4d, 0x60, 0xa5, 0x2a, 0x1d, 0xcd, 0xc1, 0xef, 0x01, 0x2c, 0x6d, 0x93,
	0x0e, 0xb9, 0x70, 0xc2, 0x69, 0xf4, 0xaa, 0x9d, 0xce, 0xc2, 0xf9, 0x88, 0xbf, 0xd0, 0x17, 0x00,
	0xaf, 0xc4, 0x3a, 0x0f, 0x2d, 0x86, 0xbd, 0xa6, 0x9d, 0x10, 0x79, 0xe9, 0x6f, 0x61, 0x81, 0x81,
	0x71, 0xfd, 0xcd, 0xcf, 0x5f, 0xa7, 0x19, 0x05, 0x2d, 0xab, 0xdd, 0xba, 0x1a, 0x34, 0xc3, 0xd4,
	0xa3, 0xb1, 0xae, 0x8e, 0x63, 0xbe, 0x54, 0xe8, 0x13, 0x80, 0x0b, 0x31, 0x7e, 0x43, 0x37, 0xc2,
	0xaa, 0xc9, 0x6e, 0x94, 0x93, 0xa7, 0x85, 0x6f, 0x09, 0x9a, 0x0d, 0xb4, 0x7e, 0x1e, 0x1a, 0xf5,
	0x68, 0x28, 0xe6, 0x31, 0xfa, 0x08, 0x60, 0x21, 0xde, 0x7d, 0x68, 0xa4, 0x48, 0xaa, 0x3d, 0xd3,
	0xf0, 0xd6, 0x05, 0x9e, 0x86, 0xcf, 0x25, 0x56, 0x03, 0x54, 0xd1, 0x07, 0x00, 0x0b, 0x0f, 0xdd,
	0x56, 0x1c, 0x56, 0x72, 0xb9, 0x34, 0x92, 0xa6, 0x20, 0xd9, 0x94, 0xa7, 0x15, 0xca, 0x87, 0xfa,
	0x0c, 0x60, 0x21, 0xfe, 0x1c, 0x8c, 0x69, 0x95, 0x7a, 0x50, 0xe4, 0x42, 0x18, 0xb7, 0xe3, 0xdf,
	0x51, 0xa1, 0xab, 0x06, 0x73, 0xac, 0x4e, 0x8b, 0xd7, 0x5c, 0x7c, 0x3c, 0xbc, 0x06, 0xcf, 0x00,
	0xf8, 0x91, 0x29, 0xf8, 0xa5, 0xb7, 0x29, 0xdf, 0xa2, 0xf6, 0x9e, 0xb1, 0x73, 0xff, 0xc1, 0xde,
	0x5d, 0xda, 0x22, 0x1d, 0xf6, 0x6c, 0x56, 0x5c, 0x77, 0xab, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x06, 0x63, 0x2c, 0xce, 0x56, 0x07, 0x00, 0x00,
}
