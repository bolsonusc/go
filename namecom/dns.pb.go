// Code generated by protoc-gen-go. DO NOT EDIT.
// source: namecom/dns.proto

/*
Package namecom is a generated protocol buffer package.

It is generated from these files:
	namecom/dns.proto
	namecom/dnssec.proto
	namecom/domains.proto
	namecom/email.proto
	namecom/emptyresponse.proto
	namecom/hello.proto
	namecom/transfers.proto
	namecom/vanity_nameservers.proto

It has these top-level messages:
	Record
	ListRecordsRequest
	ListRecordsResponse
	GetRecordRequest
	DeleteRecordRequest
	DNSSEC
	ListDNSSECsRequest
	ListDNSSECsResponse
	GetDNSSECRequest
	DeleteDNSSECRequest
	Contact
	Contacts
	Domain
	SearchRequest
	SearchResult
	SearchResponse
	ListDomainsRequest
	ListDomainsResponse
	GetDomainRequest
	CreateDomainRequest
	CreateDomainResponse
	RenewDomainRequest
	RenewDomainResponse
	AuthCodeRequest
	AuthCodeResponse
	PrivacyRequest
	PrivacyResponse
	SetNameserversRequest
	SetContactsRequest
	LockDomainRequest
	UnlockDomainRequest
	EmailForwarding
	ListEmailForwardingsRequest
	ListEmailForwardingsResponse
	GetEmailForwardingRequest
	DeleteEmailForwardingRequest
	EmptyResponse
	ErrorResponse
	HelloRequest
	HelloResponse
	Transfer
	ListTransfersRequest
	ListTransfersResponse
	GetTransferRequest
	CreateTransferRequest
	CreateTransferResponse
	CancelTransferRequest
	VanityNameserver
	ListVanityNameserversRequest
	ListVanityNameserversResponse
	GetVanityNameserverRequest
	CreateVanityNameserverRequest
	DeleteVanityNameserverRequest
*/
package namecom

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Record is an individual DNS resource record.
type Record struct {
	// Unique record id. Value is ignored on Create, and must match the URI on Update.
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Domain_name is the zone that the record belongs to.
	DomainName string `protobuf:"bytes,2,opt,name=domain_name" json:"domain_name,omitempty"`
	// Name is the hostname relative to the zone: e.g. for a record for blog.example.org, domain would be "example.org" and host would be "blog".
	// An apex record would be specified by either an empty host "" or "@".
	// A SRV record would be specified by "_{service}._{protocal}.{host}": e.g. "_sip._tcp.phone" for _sip._tcp.phone.example.org.
	Host string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	// FQDN is the Fully Qualified Domain Name. It is the combination of the host and the domain name. It always ends in a ".".
	Fqdn string `protobuf:"bytes,4,opt,name=fqdn" json:"fqdn,omitempty"`
	// Type is one of the following: A, AAAA, ANAME, CNAME, MX, NS, SRV, or TXT.
	Type string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	// Answer is either the IP address for A or AAAA records; the target for ANAME, CNAME, MX, or NS records; the text for TXT records.
	// For SRV records, answer has the following format: "{weight} {port} {target}" e.g. "1 5061 sip.example.org".
	Answer string `protobuf:"bytes,6,opt,name=answer" json:"answer,omitempty"`
	// TTL is the time this record can be cached for in seconds. Name.com allows a minimum TTL of 300, or 5 minutes.
	Ttl uint32 `protobuf:"varint,7,opt,name=ttl" json:"ttl,omitempty"`
	// Priority is only required for MX and SRV records, it is ignored for all others.
	Priority uint32 `protobuf:"varint,8,opt,name=priority" json:"priority,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Record) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Record) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *Record) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Record) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *Record) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Record) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

func (m *Record) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *Record) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

// ListRecordsRequest requests a list of records that exist for the domain
type ListRecordsRequest struct {
	// Domain_name is the zone to list the records for.
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
	// Per Page is the number of records to return per request. Per Page defaults to 1,000.
	PerPage int32 `protobuf:"varint,2,opt,name=per_page" json:"per_page,omitempty"`
	// Page is which page to return
	Page int32 `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
}

func (m *ListRecordsRequest) Reset()                    { *m = ListRecordsRequest{} }
func (m *ListRecordsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRecordsRequest) ProtoMessage()               {}
func (*ListRecordsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListRecordsRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *ListRecordsRequest) GetPerPage() int32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *ListRecordsRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// ListRecordsResponse is the response from a list request
type ListRecordsResponse struct {
	// Records contains the records in the zone
	Records []*Record `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
	// Next_page is the identifier for the next page of results. It is only populated if there is another page of results after the current page.
	NextPage int32 `protobuf:"varint,2,opt,name=next_page" json:"next_page,omitempty"`
	// Last_page is the identifier for the final page of results. It is only populated if there is another page of results after the current page.
	LastPage int32 `protobuf:"varint,3,opt,name=last_page" json:"last_page,omitempty"`
}

func (m *ListRecordsResponse) Reset()                    { *m = ListRecordsResponse{} }
func (m *ListRecordsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListRecordsResponse) ProtoMessage()               {}
func (*ListRecordsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListRecordsResponse) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *ListRecordsResponse) GetNextPage() int32 {
	if m != nil {
		return m.NextPage
	}
	return 0
}

func (m *ListRecordsResponse) GetLastPage() int32 {
	if m != nil {
		return m.LastPage
	}
	return 0
}

// GetRecordRequest requests the record identified by id and domain.
type GetRecordRequest struct {
	// Domain_name is the zone the record exists in
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
	// ID is the server-assigned unique identifier for this record
	Id int32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *GetRecordRequest) Reset()                    { *m = GetRecordRequest{} }
func (m *GetRecordRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRecordRequest) ProtoMessage()               {}
func (*GetRecordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetRecordRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *GetRecordRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// DeleteRecordRequest deletes a specific record
type DeleteRecordRequest struct {
	// Domain_name is the zone that the record to be deleted exists in.
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
	// ID is the server-assigned unique identifier for the Record to be deleted. If the Record with that ID does not exist in the specified Domain, an error is returned.
	Id int32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRecordRequest) Reset()                    { *m = DeleteRecordRequest{} }
func (m *DeleteRecordRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRecordRequest) ProtoMessage()               {}
func (*DeleteRecordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeleteRecordRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *DeleteRecordRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Record)(nil), "namecom.Record")
	proto.RegisterType((*ListRecordsRequest)(nil), "namecom.ListRecordsRequest")
	proto.RegisterType((*ListRecordsResponse)(nil), "namecom.ListRecordsResponse")
	proto.RegisterType((*GetRecordRequest)(nil), "namecom.GetRecordRequest")
	proto.RegisterType((*DeleteRecordRequest)(nil), "namecom.DeleteRecordRequest")
}

func init() { proto.RegisterFile("namecom/dns.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 708 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcd, 0x4e, 0xdb, 0x4a,
	0x18, 0xd5, 0x38, 0x7f, 0x64, 0x02, 0x82, 0x3b, 0x48, 0xdc, 0x21, 0x80, 0x94, 0x3b, 0x57, 0x17,
	0xe5, 0x42, 0x64, 0x27, 0x04, 0x16, 0xcd, 0x8e, 0x00, 0xea, 0xa6, 0x65, 0x61, 0xda, 0x4d, 0x4b,
	0x8b, 0xdc, 0x78, 0x12, 0xac, 0xda, 0x1e, 0x63, 0x4f, 0x6b, 0x50, 0xc4, 0x86, 0x0d, 0x52, 0x56,
	0x48, 0xdd, 0xb0, 0xea, 0x13, 0x74, 0x57, 0xf9, 0x25, 0xba, 0xed, 0x2b, 0xf4, 0x41, 0xaa, 0x19,
	0x3b, 0xc6, 0x04, 0x24, 0xa8, 0x2a, 0x55, 0xb0, 0xc8, 0x7c, 0xe7, 0xf3, 0x77, 0xbe, 0x39, 0xe7,
	0x68, 0xe0, 0x5f, 0xae, 0xe1, 0xd0, 0x1e, 0x73, 0x34, 0xd3, 0x0d, 0x54, 0xcf, 0x67, 0x9c, 0xa1,
	0x52, 0x52, 0xaa, 0x2e, 0x8d, 0x31, 0xea, 0x78, 0xfc, 0xcc, 0xa7, 0x81, 0xc7, 0xdc, 0x80, 0xc6,
	0x5d, 0xd5, 0xe5, 0x01, 0x63, 0x03, 0x9b, 0x6a, 0x86, 0x67, 0x69, 0x86, 0xeb, 0x32, 0x6e, 0x70,
	0x8b, 0x8d, 0x67, 0x90, 0x2f, 0x0a, 0x2c, 0xea, 0xb4, 0xc7, 0x7c, 0x13, 0xad, 0x40, 0xc5, 0x32,
	0x31, 0xa8, 0x81, 0x7a, 0xa1, 0x3b, 0x33, 0x8a, 0x70, 0xa1, 0xb5, 0xd1, 0xde, 0xdc, 0xba, 0x8e,
	0x30, 0xd0, 0x15, 0xcb, 0x44, 0x4f, 0x60, 0xc5, 0x64, 0x8e, 0x61, 0xb9, 0x47, 0x82, 0x0d, 0x2b,
	0x35, 0x50, 0x2f, 0x77, 0xff, 0x1e, 0x45, 0xb8, 0x42, 0x4f, 0x0d, 0xc7, 0xb3, 0xa9, 0xca, 0xfc,
	0xc1, 0x55, 0x84, 0x81, 0xfc, 0x22, 0xdb, 0x8b, 0x96, 0x60, 0xfe, 0x98, 0x05, 0x1c, 0xe7, 0xe4,
	0x37, 0xa5, 0x51, 0x84, 0x73, 0x61, 0x18, 0xea, 0xb2, 0x88, 0xd6, 0x61, 0xbe, 0x7f, 0x62, 0xba,
	0x38, 0x9f, 0x0e, 0x9c, 0x0d, 0xc3, 0x50, 0xcd, 0x0c, 0x95, 0x03, 0x65, 0x13, 0x5a, 0x81, 0x79,
	0x7e, 0xe6, 0x51, 0x5c, 0x90, 0xcd, 0xe5, 0x51, 0x84, 0xc1, 0xf6, 0x95, 0x84, 0x45, 0x19, 0xd5,
	0x61, 0xd1, 0x70, 0x83, 0x90, 0xfa, 0xb8, 0x28, 0x1b, 0xe6, 0x46, 0x11, 0x9e, 0x6a, 0x35, 0x55,
	0xf1, 0xd7, 0x92, 0x7d, 0x09, 0x8e, 0x16, 0x61, 0x8e, 0x73, 0x1b, 0x97, 0x6a, 0xa0, 0x3e, 0x13,
	0x6f, 0xd4, 0x6e, 0x36, 0x75, 0x51, 0x43, 0x55, 0x38, 0xe5, 0xf9, 0x16, 0xf3, 0x2d, 0x7e, 0x86,
	0xa7, 0x04, 0xae, 0xa7, 0x67, 0x32, 0x84, 0xe8, 0x99, 0x15, 0xf0, 0x58, 0xb1, 0x40, 0xa7, 0x27,
	0x1f, 0x68, 0xc0, 0xd1, 0xd6, 0x6d, 0x69, 0x80, 0xe4, 0x9e, 0xbf, 0x47, 0x9a, 0xdb, 0xb2, 0x08,
	0x22, 0xea, 0x1f, 0x79, 0xc6, 0x20, 0x96, 0xb3, 0xa0, 0xa7, 0x67, 0x84, 0x60, 0x5e, 0xd6, 0x73,
	0xb2, 0x2e, 0x7f, 0x93, 0x4b, 0x05, 0xce, 0xdf, 0x62, 0x8f, 0x7d, 0x46, 0x5f, 0x01, 0x2c, 0xf9,
	0x71, 0x0d, 0x83, 0x5a, 0xae, 0x5e, 0xd9, 0x98, 0x55, 0x93, 0x44, 0xa8, 0x71, 0x6f, 0xf7, 0x12,
	0x8c, 0x22, 0x7c, 0x01, 0x5e, 0x0f, 0x89, 0x65, 0x92, 0x0e, 0x91, 0xce, 0x92, 0x06, 0xc9, 0x6c,
	0x43, 0x3a, 0x24, 0xb3, 0x2c, 0x69, 0x10, 0x61, 0x0e, 0xe9, 0x90, 0x30, 0x0c, 0x49, 0x83, 0x08,
	0xf1, 0xe3, 0x83, 0xda, 0x0b, 0xcc, 0xbe, 0xfc, 0x37, 0x02, 0xb3, 0xdf, 0x57, 0x7b, 0xcc, 0x21,
	0x0d, 0x22, 0xd4, 0x27, 0x1d, 0xb2, 0x4d, 0x1a, 0x24, 0x16, 0x58, 0x90, 0x24, 0xba, 0x0b, 0x98,
	0xdb, 0xa4, 0xd3, 0x6e, 0x36, 0xcf, 0xdf, 0xe8, 0xe3, 0x4d, 0xd1, 0x32, 0x2c, 0xbb, 0xf4, 0x94,
	0x67, 0xaf, 0x7f, 0x53, 0x10, 0xa8, 0x6d, 0x04, 0x09, 0x1a, 0x8b, 0x70, 0x53, 0x20, 0xc7, 0x70,
	0xee, 0x29, 0x4d, 0x74, 0xf8, 0x4d, 0x13, 0xe2, 0xd4, 0x2b, 0x13, 0xa9, 0xbf, 0x4a, 0x52, 0x4f,
	0xde, 0xc3, 0xf9, 0x5d, 0x6a, 0x53, 0x4e, 0xff, 0x00, 0xd9, 0xc6, 0xe7, 0x3c, 0xcc, 0xed, 0xee,
	0x1f, 0xa0, 0x00, 0x56, 0x32, 0x3e, 0xa3, 0xa5, 0xd4, 0xcd, 0xbb, 0xd9, 0xab, 0x2e, 0xdf, 0x0f,
	0xc6, 0xd1, 0x20, 0xff, 0x5f, 0x7c, 0xff, 0xf1, 0x49, 0xf9, 0x17, 0xfd, 0xa3, 0x7d, 0xdc, 0xd4,
	0xe2, 0x4d, 0x02, 0x6d, 0x98, 0x59, 0xe9, 0x5c, 0x1b, 0xfb, 0x31, 0x80, 0xe5, 0x54, 0x53, 0xb4,
	0x98, 0x4e, 0x9d, 0xd4, 0xb9, 0x3a, 0x99, 0x2d, 0xa2, 0x4a, 0x8e, 0x3a, 0x5a, 0x7d, 0x90, 0x43,
	0x1b, 0x5a, 0xe6, 0x39, 0x7a, 0x0b, 0xa7, 0x77, 0x7c, 0x6a, 0x8c, 0x25, 0x45, 0x93, 0x03, 0xef,
	0x32, 0x34, 0x24, 0xc3, 0x2a, 0x79, 0xf8, 0x16, 0x1d, 0xb0, 0x86, 0x7a, 0x70, 0xfa, 0xa5, 0x67,
	0xfe, 0xca, 0xfc, 0x96, 0x9c, 0xbf, 0x5e, 0x7d, 0xe4, 0x0d, 0x04, 0x09, 0x87, 0xd3, 0xd9, 0x5c,
	0xa0, 0x1b, 0x1b, 0xee, 0x89, 0x4b, 0x75, 0x21, 0x45, 0xf7, 0xc4, 0x0b, 0x9d, 0xda, 0x93, 0x48,
	0xb7, 0xf6, 0x48, 0xe2, 0xee, 0x7f, 0xaf, 0xc6, 0x6f, 0xfe, 0x35, 0x00, 0xdf, 0x94, 0x85, 0x7d,
	0xc3, 0xa1, 0xbb, 0x8c, 0xef, 0x30, 0xe7, 0x50, 0xdf, 0x3b, 0x78, 0x71, 0xf8, 0x9c, 0x99, 0xd4,
	0x0e, 0xde, 0x15, 0xe5, 0xdb, 0xde, 0xfe, 0x19, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xec, 0x96, 0x6a,
	0x34, 0x06, 0x00, 0x00,
}
