// Code generated by protoc-gen-go. DO NOT EDIT.
// source: namecom/domains.proto

package namecom

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Contact struct {
	// First name of the contact.
	FirstName string `protobuf:"bytes,1,opt,name=first_name" json:"first_name,omitempty"`
	// Last name of the contact.
	LastName string `protobuf:"bytes,2,opt,name=last_name" json:"last_name,omitempty"`
	// Company name of the contact. Leave blank if the contact is an individual as some registries will assume it is a corporate entity otherwise.
	CompanyName string `protobuf:"bytes,3,opt,name=company_name" json:"company_name,omitempty"`
	// Address_1 is the first line of the contact's address.
	Address_1 string `protobuf:"bytes,4,opt,name=address_1" json:"address_1,omitempty"`
	// Address_2 is the second line of the contact's address.
	Address_2 string `protobuf:"bytes,5,opt,name=address_2" json:"address_2,omitempty"`
	// City of the contact's address.
	City string `protobuf:"bytes,6,opt,name=city" json:"city,omitempty"`
	// State or Province for the contact's address.
	State string `protobuf:"bytes,7,opt,name=state" json:"state,omitempty"`
	// Zip or Postal Code for the contact's address.
	Zip string `protobuf:"bytes,8,opt,name=zip" json:"zip,omitempty"`
	// Country code for the contact's address. Required to be a ISO 3166-1 alpha-2 code.
	Country string `protobuf:"bytes,9,opt,name=country" json:"country,omitempty"`
	// Phone number of the contact. Should be specified in the following format: "+cc.llllllll" where cc is the country code and llllllll is the local number.
	Phone string `protobuf:"bytes,10,opt,name=phone" json:"phone,omitempty"`
	// Fax number of the contact. Should be specified in the following format: "+cc.llllllll" where cc is the country code and llllllll is the local number.
	Fax string `protobuf:"bytes,11,opt,name=fax" json:"fax,omitempty"`
}

func (m *Contact) Reset()                    { *m = Contact{} }
func (m *Contact) String() string            { return proto.CompactTextString(m) }
func (*Contact) ProtoMessage()               {}
func (*Contact) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Contact) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Contact) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Contact) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *Contact) GetAddress_1() string {
	if m != nil {
		return m.Address_1
	}
	return ""
}

func (m *Contact) GetAddress_2() string {
	if m != nil {
		return m.Address_2
	}
	return ""
}

func (m *Contact) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Contact) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Contact) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

func (m *Contact) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Contact) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Contact) GetFax() string {
	if m != nil {
		return m.Fax
	}
	return ""
}

type Contacts struct {
	// Registrant is the rightful owner of the account and has the right to use and/or sell the domain name. They are able to make changes to all account, domain, and product settings. This information should be reviewed and updated regularly to ensure accuracy.
	Registrant *Contact `protobuf:"bytes,3,opt,name=registrant" json:"registrant,omitempty"`
	// Registrants often designate an administrative contact to manage their domain name(s). They primarily deal with business information such as the name on record, postal address, and contact information for the official registrant.
	Admin *Contact `protobuf:"bytes,4,opt,name=admin" json:"admin,omitempty"`
	// The technical contact manages and maintains a domain’s nameservers. If you’re working with a web designer or someone in a similar role, you many want to assign them as a technical contact.
	Tech *Contact `protobuf:"bytes,5,opt,name=tech" json:"tech,omitempty"`
	// The billing contact is the party responsible for paying bills for the account and taking care of renewals.
	Billing *Contact `protobuf:"bytes,6,opt,name=billing" json:"billing,omitempty"`
}

func (m *Contacts) Reset()                    { *m = Contacts{} }
func (m *Contacts) String() string            { return proto.CompactTextString(m) }
func (*Contacts) ProtoMessage()               {}
func (*Contacts) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Contacts) GetRegistrant() *Contact {
	if m != nil {
		return m.Registrant
	}
	return nil
}

func (m *Contacts) GetAdmin() *Contact {
	if m != nil {
		return m.Admin
	}
	return nil
}

func (m *Contacts) GetTech() *Contact {
	if m != nil {
		return m.Tech
	}
	return nil
}

func (m *Contacts) GetBilling() *Contact {
	if m != nil {
		return m.Billing
	}
	return nil
}

type Domain struct {
	// Domain_name is the punycode encoded value of the domain name.
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
	// Nameservers is the list of nameservers for this domain. If unspecified it defaults to your account default nameservers.
	Nameservers []string `protobuf:"bytes,2,rep,name=nameservers" json:"nameservers,omitempty"`
	// Contacts for the domain.
	Contacts *Contacts `protobuf:"bytes,3,opt,name=contacts" json:"contacts,omitempty"`
	// Privacy_enabled reflects if Whois Privacy is enabled for this domain.
	PrivacyEnabled bool `protobuf:"varint,4,opt,name=privacy_enabled" json:"privacy_enabled,omitempty"`
	// Locked indicates that the domain cannot be transfered to another registrar.
	Locked bool `protobuf:"varint,5,opt,name=locked" json:"locked,omitempty"`
	// Autorenew_enabled indicates if the domain will attempt to renew automatically before expiration.
	AutorenewEnabled bool `protobuf:"varint,6,opt,name=autorenew_enabled" json:"autorenew_enabled,omitempty"`
	// Expire_date is the date the domain will expire.
	ExpireDate string `protobuf:"bytes,7,opt,name=expire_date" json:"expire_date,omitempty"`
	// Create_date is the date the domain was created at the registry.
	CreateDate string `protobuf:"bytes,8,opt,name=create_date" json:"create_date,omitempty"`
	// Renewal_price is the price to renew the domain. It may be required for the RenewDomain command.
	RenewalPrice float64 `protobuf:"fixed64,9,opt,name=renewal_price" json:"renewal_price,omitempty"`
}

func (m *Domain) Reset()                    { *m = Domain{} }
func (m *Domain) String() string            { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()               {}
func (*Domain) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Domain) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *Domain) GetNameservers() []string {
	if m != nil {
		return m.Nameservers
	}
	return nil
}

func (m *Domain) GetContacts() *Contacts {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *Domain) GetPrivacyEnabled() bool {
	if m != nil {
		return m.PrivacyEnabled
	}
	return false
}

func (m *Domain) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

func (m *Domain) GetAutorenewEnabled() bool {
	if m != nil {
		return m.AutorenewEnabled
	}
	return false
}

func (m *Domain) GetExpireDate() string {
	if m != nil {
		return m.ExpireDate
	}
	return ""
}

func (m *Domain) GetCreateDate() string {
	if m != nil {
		return m.CreateDate
	}
	return ""
}

func (m *Domain) GetRenewalPrice() float64 {
	if m != nil {
		return m.RenewalPrice
	}
	return 0
}

type SearchRequest struct {
	// Timeout is a value in milliseconds on how long to perform the search for. Valid timeouts are between 500ms to 5,000ms. If not specified, timeout defaults to 1,000ms.
	// Since some additional processing is performed on the results, a response may take longer then the timeout.
	Timeout int32 `protobuf:"varint,1,opt,name=timeout" json:"timeout,omitempty"`
	// Keyword is the search term to search for. It can be just a word, or a whole domain name.
	Keyword string `protobuf:"bytes,2,opt,name=keyword" json:"keyword,omitempty"`
	// TLD_filter will limit results to only contain the specified TLDs.
	TldFilter []string `protobuf:"bytes,3,rep,name=tld_filter" json:"tld_filter,omitempty"`
	// Promo_code is not implemented yet.
	PromoCode string `protobuf:"bytes,4,opt,name=promo_code" json:"promo_code,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *SearchRequest) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *SearchRequest) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *SearchRequest) GetTldFilter() []string {
	if m != nil {
		return m.TldFilter
	}
	return nil
}

func (m *SearchRequest) GetPromoCode() string {
	if m != nil {
		return m.PromoCode
	}
	return ""
}

type SearchResult struct {
	// Domain_name is the punycode encoding of the result domain name.
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
	// SLD is first portion of the domain_name.
	Sld string `protobuf:"bytes,2,opt,name=sld" json:"sld,omitempty"`
	// TLD is the rest of the domain_name after the SLD.
	Tld string `protobuf:"bytes,3,opt,name=tld" json:"tld,omitempty"`
	// Purchaseable indicates whether the search result is available for purchase.
	Purchasable bool `protobuf:"varint,4,opt,name=purchasable" json:"purchasable,omitempty"`
	// Premium indicates that this search result is a premium result and the purchase_price needs to be passed to the DomainCreate command.
	Premium bool `protobuf:"varint,5,opt,name=premium" json:"premium,omitempty"`
	// Purchase_price is the price for purchasing this domain for 1 year. Purchase_price is always in USD.
	PurchasePrice float64 `protobuf:"fixed64,6,opt,name=purchase_price" json:"purchase_price,omitempty"`
	// Purchase_type indicates what kind of purchase this result is for. It should be passed to the DomainCreate command.
	PurchaseType string `protobuf:"bytes,7,opt,name=purchase_type" json:"purchase_type,omitempty"`
	// Renewal_price is the annual renewal price for this domain as it may be different then the purchase_price.
	RenewalPrice float64 `protobuf:"fixed64,8,opt,name=renewal_price" json:"renewal_price,omitempty"`
}

func (m *SearchResult) Reset()                    { *m = SearchResult{} }
func (m *SearchResult) String() string            { return proto.CompactTextString(m) }
func (*SearchResult) ProtoMessage()               {}
func (*SearchResult) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *SearchResult) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *SearchResult) GetSld() string {
	if m != nil {
		return m.Sld
	}
	return ""
}

func (m *SearchResult) GetTld() string {
	if m != nil {
		return m.Tld
	}
	return ""
}

func (m *SearchResult) GetPurchasable() bool {
	if m != nil {
		return m.Purchasable
	}
	return false
}

func (m *SearchResult) GetPremium() bool {
	if m != nil {
		return m.Premium
	}
	return false
}

func (m *SearchResult) GetPurchasePrice() float64 {
	if m != nil {
		return m.PurchasePrice
	}
	return 0
}

func (m *SearchResult) GetPurchaseType() string {
	if m != nil {
		return m.PurchaseType
	}
	return ""
}

func (m *SearchResult) GetRenewalPrice() float64 {
	if m != nil {
		return m.RenewalPrice
	}
	return 0
}

type SearchResponse struct {
	// Results of the search are returned here, the order should not be relied upon.
	Results []*SearchResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *SearchResponse) GetResults() []*SearchResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type ListDomainsRequest struct {
	// Per Page is the number of records to return per request. Per Page defaults to 1,000.
	PerPage int32 `protobuf:"varint,1,opt,name=per_page" json:"per_page,omitempty"`
	// Page is which page to return
	Page int32 `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListDomainsRequest) Reset()                    { *m = ListDomainsRequest{} }
func (m *ListDomainsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDomainsRequest) ProtoMessage()               {}
func (*ListDomainsRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *ListDomainsRequest) GetPerPage() int32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *ListDomainsRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// ListDomainResponse is the response from a list request
type ListDomainsResponse struct {
	// Domains is the list of domains in your account.
	Domains []*Domain `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty"`
	// Next_page is the identifier for the next page of results. It is only populated if there is another page of results after the current page.
	NextPage int32 `protobuf:"varint,2,opt,name=next_page" json:"next_page,omitempty"`
	// Last_page is the identifier for the final page of results. It is only populated if there is another page of results after the current page.
	LastPage int32 `protobuf:"varint,3,opt,name=last_page" json:"last_page,omitempty"`
}

func (m *ListDomainsResponse) Reset()                    { *m = ListDomainsResponse{} }
func (m *ListDomainsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListDomainsResponse) ProtoMessage()               {}
func (*ListDomainsResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *ListDomainsResponse) GetDomains() []*Domain {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *ListDomainsResponse) GetNextPage() int32 {
	if m != nil {
		return m.NextPage
	}
	return 0
}

func (m *ListDomainsResponse) GetLastPage() int32 {
	if m != nil {
		return m.LastPage
	}
	return 0
}

type GetDomainRequest struct {
	// Domain_name is the domain to retrieve.
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
}

func (m *GetDomainRequest) Reset()                    { *m = GetDomainRequest{} }
func (m *GetDomainRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDomainRequest) ProtoMessage()               {}
func (*GetDomainRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *GetDomainRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

type CreateDomainRequest struct {
	// Domain is the domain object to create. If privacy_enabled is set, Whois Privacy will also be purchased for an additional amount.
	Domain *Domain `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	// Purchase_price is the amount to pay for the domain. If privacy_enabled is set, the regular price for whois protection will be added automatically. If VAT tax applies, it will also be added automatically.
	// Purchase_price is required if purchase_type is not "registration" or if it is a premium domain.
	PurchasePrice float64 `protobuf:"fixed64,2,opt,name=purchase_price" json:"purchase_price,omitempty"`
	// Purchase_type defaults to "registration" but should be copied from the result of a search command otherwise.
	PurchaseType string `protobuf:"bytes,3,opt,name=purchase_type" json:"purchase_type,omitempty"`
	// Years is for how many years to register the domain for. Years defaults to 1 if not passed and cannot be more than 10.
	// If passing purchase_price make sure to adjust it accordingly.
	Years int32 `protobuf:"varint,4,opt,name=years" json:"years,omitempty"`
	// TLD_requirements is a way to pass additional data that is required by some registries.
	TldRequirements map[string]string `protobuf:"bytes,5,rep,name=tld_requirements" json:"tld_requirements,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Promo_code is not yet implemented.
	PromoCode string `protobuf:"bytes,6,opt,name=promo_code" json:"promo_code,omitempty"`
}

func (m *CreateDomainRequest) Reset()                    { *m = CreateDomainRequest{} }
func (m *CreateDomainRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDomainRequest) ProtoMessage()               {}
func (*CreateDomainRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *CreateDomainRequest) GetDomain() *Domain {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *CreateDomainRequest) GetPurchasePrice() float64 {
	if m != nil {
		return m.PurchasePrice
	}
	return 0
}

func (m *CreateDomainRequest) GetPurchaseType() string {
	if m != nil {
		return m.PurchaseType
	}
	return ""
}

func (m *CreateDomainRequest) GetYears() int32 {
	if m != nil {
		return m.Years
	}
	return 0
}

func (m *CreateDomainRequest) GetTldRequirements() map[string]string {
	if m != nil {
		return m.TldRequirements
	}
	return nil
}

func (m *CreateDomainRequest) GetPromoCode() string {
	if m != nil {
		return m.PromoCode
	}
	return ""
}

type CreateDomainResponse struct {
	// Domain is the newly created domain.
	Domain *Domain `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	// Order is an identifier for this purchase.
	Order int32 `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
	// Total_paid is the total amount paid, including VAT and whois protection.
	TotalPaid float64 `protobuf:"fixed64,3,opt,name=total_paid" json:"total_paid,omitempty"`
}

func (m *CreateDomainResponse) Reset()                    { *m = CreateDomainResponse{} }
func (m *CreateDomainResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDomainResponse) ProtoMessage()               {}
func (*CreateDomainResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *CreateDomainResponse) GetDomain() *Domain {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *CreateDomainResponse) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *CreateDomainResponse) GetTotalPaid() float64 {
	if m != nil {
		return m.TotalPaid
	}
	return 0
}

type RenewDomainRequest struct {
	// Domain_name is the domain to renew.
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
	// Purchase_price is the amount to pay for the domain renewal. If VAT tax applies, it will also be added automatically.
	// Purchase_price is required if this is a premium domain.
	PurchasePrice float64 `protobuf:"fixed64,2,opt,name=purchase_price" json:"purchase_price,omitempty"`
	// Years is for how many years to renew the domain for. Years defaults to 1 if not passed and cannot be more than 10.
	Years int32 `protobuf:"varint,3,opt,name=years" json:"years,omitempty"`
	// Promo_code is not yet implemented.
	PromoCode string `protobuf:"bytes,4,opt,name=promo_code" json:"promo_code,omitempty"`
}

func (m *RenewDomainRequest) Reset()                    { *m = RenewDomainRequest{} }
func (m *RenewDomainRequest) String() string            { return proto.CompactTextString(m) }
func (*RenewDomainRequest) ProtoMessage()               {}
func (*RenewDomainRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *RenewDomainRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *RenewDomainRequest) GetPurchasePrice() float64 {
	if m != nil {
		return m.PurchasePrice
	}
	return 0
}

func (m *RenewDomainRequest) GetYears() int32 {
	if m != nil {
		return m.Years
	}
	return 0
}

func (m *RenewDomainRequest) GetPromoCode() string {
	if m != nil {
		return m.PromoCode
	}
	return ""
}

type RenewDomainResponse struct {
	// Domain reflects the status of the domain after renewing.
	Domain *Domain `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	// Order is an identifier for this purchase
	Order int32 `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
	// Total_paid is the total amount paid, including VAT.
	TotalPaid float64 `protobuf:"fixed64,3,opt,name=total_paid" json:"total_paid,omitempty"`
}

func (m *RenewDomainResponse) Reset()                    { *m = RenewDomainResponse{} }
func (m *RenewDomainResponse) String() string            { return proto.CompactTextString(m) }
func (*RenewDomainResponse) ProtoMessage()               {}
func (*RenewDomainResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *RenewDomainResponse) GetDomain() *Domain {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *RenewDomainResponse) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *RenewDomainResponse) GetTotalPaid() float64 {
	if m != nil {
		return m.TotalPaid
	}
	return 0
}

type AuthCodeRequest struct {
	// Domain_name is the domain name to retrieve the authorization code for.
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
}

func (m *AuthCodeRequest) Reset()                    { *m = AuthCodeRequest{} }
func (m *AuthCodeRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthCodeRequest) ProtoMessage()               {}
func (*AuthCodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *AuthCodeRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

type AuthCodeResponse struct {
	// Auth_code is the authorization code needed to transfer a domain to another registrar. If you are storing auth codes, be sure to store them in a secure manner.
	AuthCode string `protobuf:"bytes,1,opt,name=auth_code" json:"auth_code,omitempty"`
}

func (m *AuthCodeResponse) Reset()                    { *m = AuthCodeResponse{} }
func (m *AuthCodeResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthCodeResponse) ProtoMessage()               {}
func (*AuthCodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *AuthCodeResponse) GetAuthCode() string {
	if m != nil {
		return m.AuthCode
	}
	return ""
}

type PrivacyRequest struct {
	// Domain_name is the domain to purchase Whois Privacy for.
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
	// Purchase_price is the amount you expect to pay.
	PurchasePrice float64 `protobuf:"fixed64,2,opt,name=purchase_price" json:"purchase_price,omitempty"`
	// Years is the number of years you wish to purchase Whois Privacy for. Years defaults to 1 and cannot be more then the domain expiration date.
	Years int32 `protobuf:"varint,3,opt,name=years" json:"years,omitempty"`
	// Promo_code is not yet implemented
	PromoCode string `protobuf:"bytes,4,opt,name=promo_code" json:"promo_code,omitempty"`
}

func (m *PrivacyRequest) Reset()                    { *m = PrivacyRequest{} }
func (m *PrivacyRequest) String() string            { return proto.CompactTextString(m) }
func (*PrivacyRequest) ProtoMessage()               {}
func (*PrivacyRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *PrivacyRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *PrivacyRequest) GetPurchasePrice() float64 {
	if m != nil {
		return m.PurchasePrice
	}
	return 0
}

func (m *PrivacyRequest) GetYears() int32 {
	if m != nil {
		return m.Years
	}
	return 0
}

func (m *PrivacyRequest) GetPromoCode() string {
	if m != nil {
		return m.PromoCode
	}
	return ""
}

type PrivacyResponse struct {
	// Domain is the status of the domain after the purchase of Whois Privacy.
	Domain *Domain `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	// Order is an identifier for this purchase.
	Order int32 `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
	// Total_paid is the total amount paid, including VAT.
	TotalPaid float64 `protobuf:"fixed64,3,opt,name=total_paid" json:"total_paid,omitempty"`
}

func (m *PrivacyResponse) Reset()                    { *m = PrivacyResponse{} }
func (m *PrivacyResponse) String() string            { return proto.CompactTextString(m) }
func (*PrivacyResponse) ProtoMessage()               {}
func (*PrivacyResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *PrivacyResponse) GetDomain() *Domain {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *PrivacyResponse) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *PrivacyResponse) GetTotalPaid() float64 {
	if m != nil {
		return m.TotalPaid
	}
	return 0
}

type SetNameserversRequest struct {
	// Domain_name is the domain name to set the nameservers for.
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
	// Namesevers is a list of the nameservers to set. Nameservers should already be set up and hosting the zone properly as some registries will verify before allowing the change.
	Nameservers []string `protobuf:"bytes,2,rep,name=nameservers" json:"nameservers,omitempty"`
}

func (m *SetNameserversRequest) Reset()                    { *m = SetNameserversRequest{} }
func (m *SetNameserversRequest) String() string            { return proto.CompactTextString(m) }
func (*SetNameserversRequest) ProtoMessage()               {}
func (*SetNameserversRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *SetNameserversRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *SetNameserversRequest) GetNameservers() []string {
	if m != nil {
		return m.Nameservers
	}
	return nil
}

type SetContactsRequest struct {
	// Domain_name is the domain name to set the contacts for.
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
	// Contacts is the list of contacts to set.
	Contacts *Contacts `protobuf:"bytes,3,opt,name=contacts" json:"contacts,omitempty"`
}

func (m *SetContactsRequest) Reset()                    { *m = SetContactsRequest{} }
func (m *SetContactsRequest) String() string            { return proto.CompactTextString(m) }
func (*SetContactsRequest) ProtoMessage()               {}
func (*SetContactsRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *SetContactsRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *SetContactsRequest) GetContacts() *Contacts {
	if m != nil {
		return m.Contacts
	}
	return nil
}

type LockDomainRequest struct {
	// Domain_name is the domain name to lock.
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
}

func (m *LockDomainRequest) Reset()                    { *m = LockDomainRequest{} }
func (m *LockDomainRequest) String() string            { return proto.CompactTextString(m) }
func (*LockDomainRequest) ProtoMessage()               {}
func (*LockDomainRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func (m *LockDomainRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

type UnlockDomainRequest struct {
	// Domain_name is the domain name to unlock.
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
}

func (m *UnlockDomainRequest) Reset()                    { *m = UnlockDomainRequest{} }
func (m *UnlockDomainRequest) String() string            { return proto.CompactTextString(m) }
func (*UnlockDomainRequest) ProtoMessage()               {}
func (*UnlockDomainRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

func (m *UnlockDomainRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func init() {
	proto.RegisterType((*Contact)(nil), "namecom.Contact")
	proto.RegisterType((*Contacts)(nil), "namecom.Contacts")
	proto.RegisterType((*Domain)(nil), "namecom.Domain")
	proto.RegisterType((*SearchRequest)(nil), "namecom.SearchRequest")
	proto.RegisterType((*SearchResult)(nil), "namecom.SearchResult")
	proto.RegisterType((*SearchResponse)(nil), "namecom.SearchResponse")
	proto.RegisterType((*ListDomainsRequest)(nil), "namecom.ListDomainsRequest")
	proto.RegisterType((*ListDomainsResponse)(nil), "namecom.ListDomainsResponse")
	proto.RegisterType((*GetDomainRequest)(nil), "namecom.GetDomainRequest")
	proto.RegisterType((*CreateDomainRequest)(nil), "namecom.CreateDomainRequest")
	proto.RegisterType((*CreateDomainResponse)(nil), "namecom.CreateDomainResponse")
	proto.RegisterType((*RenewDomainRequest)(nil), "namecom.RenewDomainRequest")
	proto.RegisterType((*RenewDomainResponse)(nil), "namecom.RenewDomainResponse")
	proto.RegisterType((*AuthCodeRequest)(nil), "namecom.AuthCodeRequest")
	proto.RegisterType((*AuthCodeResponse)(nil), "namecom.AuthCodeResponse")
	proto.RegisterType((*PrivacyRequest)(nil), "namecom.PrivacyRequest")
	proto.RegisterType((*PrivacyResponse)(nil), "namecom.PrivacyResponse")
	proto.RegisterType((*SetNameserversRequest)(nil), "namecom.SetNameserversRequest")
	proto.RegisterType((*SetContactsRequest)(nil), "namecom.SetContactsRequest")
	proto.RegisterType((*LockDomainRequest)(nil), "namecom.LockDomainRequest")
	proto.RegisterType((*UnlockDomainRequest)(nil), "namecom.UnlockDomainRequest")
}

func init() { proto.RegisterFile("namecom/domains.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1859 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x4d, 0x6f, 0x1b, 0xc7,
	0x19, 0x06, 0x49, 0xf1, 0x43, 0x2f, 0xf5, 0xe5, 0x91, 0x6c, 0xaf, 0x69, 0x49, 0x61, 0xc6, 0xb2,
	0x23, 0xc9, 0x14, 0x25, 0x52, 0x56, 0x6a, 0xef, 0x2d, 0x92, 0x9c, 0x14, 0x41, 0xd2, 0x04, 0x4b,
	0xbb, 0x28, 0xdc, 0x18, 0xc4, 0x7a, 0x77, 0x2c, 0x6d, 0xbd, 0x5f, 0xd9, 0x1d, 0x2a, 0xa6, 0x1d,
	0x5f, 0xda, 0x1b, 0x4f, 0x05, 0x72, 0xc9, 0x35, 0x40, 0xd1, 0x73, 0x2f, 0xcc, 0x8f, 0xe8, 0xa9,
	0x40, 0xff, 0x42, 0x0f, 0xf9, 0x09, 0x3d, 0x16, 0x33, 0xb3, 0x1f, 0x43, 0x2e, 0x69, 0xc1, 0x56,
	0x0e, 0x2e, 0x92, 0x93, 0xb8, 0xf3, 0x3e, 0xfb, 0x3c, 0xb3, 0xf3, 0xbe, 0xfb, 0xcc, 0xbb, 0x23,
	0xb8, 0xec, 0xea, 0x0e, 0x31, 0x3c, 0x67, 0xd7, 0xf4, 0x1c, 0xdd, 0x72, 0xc3, 0xa6, 0x1f, 0x78,
	0xd4, 0x43, 0xe5, 0x68, 0xb8, 0x76, 0x3d, 0x8e, 0x13, 0xc7, 0xa7, 0xfd, 0x80, 0x84, 0xbe, 0xe7,
	0x86, 0x44, 0xa0, 0x6a, 0xab, 0x27, 0x9e, 0x77, 0x62, 0x93, 0x5d, 0xdd, 0xb7, 0x76, 0x75, 0xd7,
	0xf5, 0xa8, 0x4e, 0x2d, 0x2f, 0xe6, 0xc0, 0x7f, 0x2b, 0x40, 0xf9, 0xc8, 0x73, 0xa9, 0x6e, 0x50,
	0xd4, 0x00, 0x78, 0x6a, 0x05, 0x21, 0xed, 0x32, 0x3a, 0x25, 0x57, 0xcf, 0x6d, 0xce, 0x1e, 0xce,
	0x0d, 0x86, 0xca, 0xcc, 0xa7, 0xba, 0x4b, 0xfe, 0x3a, 0x54, 0x72, 0x9a, 0x14, 0x47, 0x5b, 0x30,
	0x6b, 0xeb, 0x31, 0x38, 0xcf, 0xc1, 0xd5, 0xc1, 0x50, 0x29, 0x1c, 0x7b, 0x02, 0x9b, 0x46, 0x11,
	0x86, 0x39, 0xc3, 0x73, 0x7c, 0xdd, 0xed, 0x0b, 0x74, 0x81, 0xa1, 0xb5, 0x91, 0x31, 0xd4, 0x86,
	0x59, 0xdd, 0x34, 0x03, 0x12, 0x86, 0xdd, 0x96, 0x32, 0xc3, 0xe9, 0x56, 0x06, 0x43, 0x65, 0xae,
	0xd5, 0xde, 0xaf, 0x7f, 0xae, 0x5b, 0x6e, 0xbd, 0x43, 0x9b, 0x82, 0x37, 0x81, 0xa1, 0xd5, 0xf4,
	0x9e, 0xb6, 0x52, 0xe4, 0xa4, 0xe9, 0x00, 0xc2, 0x30, 0x63, 0x58, 0xb4, 0xaf, 0x94, 0x38, 0xd9,
	0xc2, 0x60, 0xa8, 0x94, 0x8e, 0x89, 0x7b, 0x46, 0x02, 0x4e, 0xc3, 0x63, 0xa8, 0x0e, 0xc5, 0x90,
	0xea, 0x94, 0x28, 0x65, 0x0e, 0x82, 0xc1, 0x50, 0xc9, 0x1f, 0x7d, 0xc1, 0x01, 0x22, 0x80, 0xde,
	0x83, 0xc2, 0x0b, 0xcb, 0x57, 0x2a, 0x3c, 0x3e, 0x3f, 0x18, 0x2a, 0xc5, 0xbb, 0x7b, 0xed, 0xbd,
	0x36, 0x87, 0xb0, 0x08, 0xda, 0x80, 0xb2, 0xe1, 0xf5, 0x5c, 0x1a, 0xf4, 0x95, 0xd9, 0x94, 0xe4,
	0x61, 0x87, 0x23, 0xe2, 0x10, 0xba, 0x0d, 0x45, 0xff, 0xd4, 0x73, 0x89, 0x02, 0x1c, 0x73, 0x79,
	0x30, 0x54, 0xe6, 0x6f, 0xb7, 0x9a, 0xfb, 0x7b, 0xfb, 0x07, 0x07, 0x07, 0xad, 0x76, 0x4b, 0x10,
	0x0a, 0x0c, 0x5a, 0x82, 0xc2, 0x53, 0xfd, 0xb9, 0x52, 0xe5, 0x4f, 0xc4, 0x7e, 0xe2, 0x1f, 0x73,
	0x50, 0x89, 0xd2, 0x14, 0xa2, 0x3d, 0x80, 0x80, 0x9c, 0x58, 0x21, 0x0d, 0x74, 0x97, 0xf2, 0xc5,
	0xac, 0xb6, 0x97, 0x9a, 0x51, 0x0d, 0x34, 0x23, 0x98, 0x26, 0x61, 0xd0, 0x2d, 0x28, 0xea, 0xa6,
	0x63, 0xb9, 0x7c, 0x61, 0x27, 0x81, 0x45, 0x18, 0x6d, 0xc0, 0x0c, 0x25, 0xc6, 0x29, 0x5f, 0xcb,
	0x49, 0x30, 0x1e, 0x45, 0xdb, 0x50, 0x7e, 0x62, 0xd9, 0xb6, 0xe5, 0x9e, 0xf0, 0xb5, 0x9d, 0x04,
	0x8c, 0x01, 0xf8, 0xbf, 0x79, 0x28, 0x1d, 0xf3, 0xaa, 0x45, 0x2d, 0xa8, 0x8a, 0xfa, 0x95, 0xeb,
	0x6b, 0x71, 0x30, 0x54, 0xaa, 0xe4, 0xb9, 0xee, 0xf8, 0x36, 0x69, 0x7a, 0xc1, 0x89, 0x26, 0x63,
	0x50, 0x1d, 0xaa, 0xec, 0x6f, 0x48, 0x82, 0x33, 0x12, 0x84, 0x4a, 0xbe, 0x5e, 0xd8, 0x9c, 0xd5,
	0xe4, 0x21, 0xb4, 0x03, 0x15, 0x23, 0x5a, 0x97, 0x68, 0x25, 0x2e, 0x8d, 0x4f, 0x26, 0xd4, 0x12,
	0x08, 0xda, 0x84, 0x45, 0x3f, 0xb0, 0xce, 0x74, 0xa3, 0xdf, 0x25, 0xae, 0xfe, 0xc4, 0x26, 0x26,
	0x5f, 0x92, 0x8a, 0x36, 0x3e, 0x8c, 0xae, 0x40, 0xc9, 0xf6, 0x8c, 0x67, 0xc4, 0xe4, 0x8b, 0x51,
	0xd1, 0xa2, 0x2b, 0xd4, 0x80, 0x4b, 0x7a, 0x8f, 0x7a, 0x01, 0x71, 0xc9, 0x37, 0x09, 0x47, 0x89,
	0x43, 0xb2, 0x01, 0x74, 0x0b, 0xaa, 0xe4, 0xb9, 0x6f, 0x05, 0xa4, 0x6b, 0xa6, 0x55, 0x36, 0xf3,
	0x3d, 0xcb, 0xb5, 0x1c, 0x60, 0x38, 0x23, 0x20, 0x3a, 0x8d, 0x70, 0x15, 0x19, 0x27, 0x05, 0xd0,
	0x36, 0xcc, 0x73, 0x01, 0xdd, 0xee, 0xfa, 0x81, 0x65, 0x10, 0x5e, 0x72, 0xb9, 0x08, 0x39, 0x1a,
	0xc2, 0x7f, 0xc9, 0xc1, 0x7c, 0x87, 0xe8, 0x81, 0x71, 0xaa, 0x91, 0xaf, 0x7b, 0x24, 0xa4, 0x48,
	0x81, 0x32, 0xb5, 0x1c, 0xe2, 0xf5, 0x28, 0x5f, 0xfd, 0xa2, 0x16, 0x5f, 0xb2, 0xc8, 0x33, 0xd2,
	0xff, 0xc6, 0x0b, 0x4c, 0xf1, 0x2a, 0x6b, 0xf1, 0x25, 0x5a, 0x07, 0xa0, 0xb6, 0xd9, 0x7d, 0x6a,
	0xd9, 0x94, 0x04, 0x4a, 0x81, 0x67, 0x40, 0x1a, 0x61, 0x71, 0x3f, 0xf0, 0x1c, 0xaf, 0x6b, 0x78,
	0x26, 0x11, 0x2f, 0xae, 0x26, 0x8d, 0xe0, 0x9f, 0xf2, 0x30, 0x17, 0xcf, 0x22, 0xec, 0xd9, 0xf4,
	0x6d, 0xca, 0x60, 0x0d, 0x0a, 0xa1, 0x6d, 0x4a, 0x26, 0x53, 0x8e, 0xa0, 0x1a, 0x1b, 0x47, 0xd7,
	0xa0, 0x40, 0x6d, 0x53, 0xb8, 0xca, 0x61, 0x99, 0x79, 0x10, 0x63, 0x60, 0x63, 0x68, 0x1b, 0xaa,
	0x7e, 0x2f, 0x30, 0x4e, 0xf5, 0x90, 0xe5, 0x43, 0xe4, 0xfa, 0xb0, 0xc2, 0x3c, 0x8d, 0x06, 0x3d,
	0xa2, 0xc9, 0x41, 0x74, 0x03, 0xca, 0x7e, 0x40, 0x1c, 0xab, 0xe7, 0x88, 0x94, 0x1f, 0xce, 0xb2,
	0xb7, 0xfd, 0xa9, 0x6e, 0x87, 0x44, 0x8b, 0x23, 0xa8, 0x05, 0x0b, 0xd1, 0x3d, 0x24, 0xca, 0x40,
	0x89, 0x67, 0x80, 0x63, 0x5b, 0xed, 0xe6, 0xbd, 0x7b, 0xda, 0x18, 0x00, 0x7d, 0x08, 0xf3, 0xc9,
	0x08, 0xed, 0xfb, 0x71, 0x15, 0x2c, 0x31, 0x77, 0x8b, 0xdf, 0x51, 0x66, 0xc9, 0xda, 0x28, 0x0c,
	0xed, 0x8e, 0xe7, 0xba, 0x32, 0xae, 0x34, 0x96, 0xf0, 0x8f, 0x60, 0x21, 0x59, 0x69, 0xbe, 0x03,
	0xa0, 0x5d, 0x28, 0x07, 0x7c, 0xd5, 0x43, 0x25, 0x57, 0x2f, 0x6c, 0x56, 0xdb, 0x97, 0x93, 0x97,
	0x43, 0xce, 0x89, 0x16, 0xa3, 0xf0, 0x31, 0xa0, 0xcf, 0xac, 0x90, 0x8a, 0x37, 0x36, 0x8c, 0xeb,
	0xa6, 0x06, 0x15, 0x9f, 0x04, 0x5d, 0x5f, 0x3f, 0x21, 0x51, 0xe1, 0x24, 0xd7, 0x08, 0xc1, 0x0c,
	0x1f, 0xcf, 0xf3, 0x71, 0xfe, 0x1b, 0x7f, 0x0b, 0xcb, 0x23, 0x2c, 0xd1, 0x6c, 0xb6, 0xa0, 0x1c,
	0x6d, 0x60, 0xd1, 0x6c, 0x16, 0x93, 0xd9, 0x08, 0xa8, 0x16, 0xc7, 0x99, 0xb3, 0xbb, 0xe4, 0x39,
	0xed, 0x4a, 0xd4, 0xe9, 0x00, 0x8b, 0xf2, 0xcd, 0x85, 0x47, 0x0b, 0x22, 0x9a, 0x0c, 0xe0, 0xfb,
	0xb0, 0xf4, 0x09, 0x89, 0xc4, 0xe3, 0x27, 0x78, 0xf3, 0xa2, 0xc3, 0xdf, 0x15, 0x60, 0xf9, 0x88,
	0xbf, 0x7a, 0xa3, 0x54, 0x9f, 0x42, 0x49, 0xc0, 0x38, 0x4b, 0xf6, 0x21, 0x0e, 0xdf, 0x1f, 0x0c,
	0x95, 0xb5, 0x97, 0x58, 0xe6, 0x52, 0xb1, 0x24, 0x83, 0x5f, 0x69, 0x11, 0xc3, 0x84, 0x6a, 0xca,
	0x9f, 0x57, 0x4d, 0x1b, 0xe3, 0xd5, 0x24, 0x36, 0xd3, 0xb1, 0xda, 0x59, 0x81, 0x62, 0x9f, 0xe8,
	0x41, 0xc8, 0x2b, 0xbe, 0xa8, 0x89, 0x0b, 0xf4, 0x18, 0x96, 0xd8, 0x9b, 0x1b, 0x90, 0xaf, 0x7b,
	0x56, 0x40, 0x1c, 0xe2, 0xd2, 0x50, 0x29, 0xf2, 0x4c, 0xb4, 0x52, 0xd3, 0xcc, 0x3e, 0x72, 0xf3,
	0x81, 0x6d, 0x6a, 0xd2, 0x3d, 0xf7, 0xd9, 0x8e, 0xa6, 0x65, 0xa8, 0xc6, 0xac, 0xa0, 0x34, 0x6e,
	0x05, 0xb5, 0x43, 0x58, 0x99, 0xc4, 0xc4, 0xb6, 0xbb, 0x67, 0xa4, 0x2f, 0x92, 0xa2, 0xb1, 0x9f,
	0x6c, 0xfa, 0x67, 0xba, 0xdd, 0x8b, 0xfa, 0x0a, 0x4d, 0x5c, 0xa8, 0xf9, 0xbb, 0x39, 0xfc, 0x63,
	0x19, 0x56, 0x46, 0xa7, 0x18, 0x15, 0xd7, 0xbf, 0x4a, 0xe7, 0xe5, 0xe5, 0xef, 0xa5, 0xc1, 0x50,
	0xf9, 0xa1, 0xf4, 0xba, 0xcc, 0x34, 0xb0, 0xb4, 0xb7, 0x60, 0xf5, 0x8f, 0xd8, 0x0d, 0xc5, 0xca,
	0x34, 0x0d, 0xcf, 0x61, 0xd1, 0xb0, 0x9d, 0x5e, 0x3e, 0x6e, 0xe0, 0x78, 0x5f, 0xc1, 0xea, 0x4b,
	0x9c, 0x6e, 0xb7, 0xec, 0x2a, 0x6d, 0x94, 0xb0, 0x8a, 0x59, 0xff, 0x84, 0x1b, 0x38, 0x69, 0x88,
	0xb0, 0x8a, 0x8f, 0x3d, 0x36, 0x92, 0xb4, 0x32, 0x58, 0xc5, 0x72, 0xa3, 0x83, 0x1b, 0x98, 0xb5,
	0x27, 0x0c, 0xc7, 0x3b, 0x16, 0xdc, 0xc0, 0xbc, 0x1b, 0xc1, 0x2a, 0x3e, 0xfa, 0x82, 0x05, 0x45,
	0x57, 0x81, 0x55, 0xfc, 0xb0, 0x83, 0x1b, 0x98, 0x77, 0x0d, 0x58, 0xc5, 0x23, 0x0d, 0x05, 0x7e,
	0xc5, 0xf8, 0x1d, 0xcb, 0x7d, 0x77, 0xa6, 0xc3, 0xba, 0x87, 0x77, 0x67, 0x36, 0x71, 0x8b, 0xf2,
	0x8e, 0x4c, 0xe8, 0x55, 0x03, 0x8b, 0x16, 0x03, 0xab, 0x6c, 0x6f, 0x6a, 0xe0, 0x4c, 0x37, 0x11,
	0x07, 0xa4, 0xc6, 0x01, 0xab, 0xb8, 0xbd, 0xd7, 0xba, 0xbb, 0xd3, 0x6a, 0xed, 0xb4, 0xf6, 0x1f,
	0xb4, 0xdb, 0xea, 0xc1, 0x5d, 0x75, 0xff, 0xe0, 0x11, 0x13, 0x4d, 0xbb, 0x06, 0x01, 0xfa, 0xcd,
	0x04, 0xd0, 0xe8, 0xfe, 0xa1, 0x72, 0xc7, 0x49, 0xdd, 0xa9, 0x0e, 0x45, 0x2f, 0x30, 0x49, 0x20,
	0x0c, 0x98, 0xf7, 0xb5, 0xa5, 0x56, 0x7b, 0xff, 0xce, 0xc1, 0x87, 0x9a, 0x08, 0xa0, 0x2d, 0x00,
	0xea, 0x51, 0x46, 0xa0, 0x5b, 0x62, 0x03, 0x1e, 0xf1, 0x2e, 0x29, 0x88, 0xff, 0x91, 0x03, 0xa4,
	0x31, 0xb9, 0x8b, 0x1a, 0xf3, 0xdb, 0x98, 0x66, 0x62, 0x87, 0x05, 0xd9, 0x0e, 0xcf, 0x6b, 0x5d,
	0x86, 0x65, 0x58, 0x1e, 0x99, 0xf2, 0xaf, 0x56, 0xf3, 0xab, 0xd5, 0xfc, 0xc2, 0xad, 0xe6, 0xde,
	0xff, 0x81, 0xd5, 0x1c, 0xc3, 0xe2, 0x47, 0x3d, 0x7a, 0x7a, 0xe4, 0x99, 0xe4, 0x02, 0xfd, 0xdf,
	0x1e, 0x2c, 0xa5, 0x2c, 0xd1, 0x9b, 0xbf, 0x0a, 0xb3, 0x7a, 0x8f, 0x9e, 0x0a, 0xc3, 0xc8, 0x45,
	0x07, 0x0e, 0xf1, 0x00, 0xfe, 0x21, 0x07, 0x0b, 0x5f, 0x8a, 0xcf, 0xc8, 0x0b, 0xd8, 0xdb, 0xad,
	0xc9, 0xf6, 0xf6, 0x33, 0x79, 0xda, 0xb7, 0xb0, 0x98, 0x4c, 0x31, 0x7a, 0xa8, 0x0f, 0xce, 0x71,
	0xb3, 0x37, 0x48, 0xd2, 0x7a, 0x36, 0x49, 0x23, 0x99, 0xb1, 0xe1, 0x72, 0x87, 0xd0, 0xdf, 0xa5,
	0xc6, 0x77, 0x81, 0x75, 0x3a, 0xf7, 0x6c, 0x00, 0x9f, 0x01, 0xea, 0x10, 0x9a, 0x9c, 0x02, 0xbc,
	0xbd, 0xd4, 0x9b, 0x1d, 0x32, 0xe0, 0x8f, 0xe1, 0xd2, 0x67, 0x9e, 0xf1, 0xec, 0xc2, 0x5f, 0x20,
	0xbf, 0x85, 0xe5, 0x87, 0xae, 0xfd, 0x33, 0x30, 0xb5, 0x7f, 0x02, 0x28, 0x47, 0x5f, 0x63, 0xe8,
	0x31, 0x54, 0xa5, 0x8f, 0x33, 0x74, 0x3d, 0x79, 0x92, 0xec, 0x87, 0x5f, 0x6d, 0x75, 0x72, 0x50,
	0x14, 0x0e, 0x5e, 0xfe, 0xf3, 0xbf, 0xff, 0xf3, 0x5d, 0x7e, 0x1e, 0x55, 0x77, 0xcf, 0xee, 0xc4,
	0x47, 0x93, 0xe8, 0x11, 0xcc, 0x26, 0x5f, 0x5f, 0xe8, 0x5a, 0x72, 0xff, 0xf8, 0x17, 0x59, 0x6d,
	0xbc, 0xca, 0xf0, 0xfb, 0x9c, 0xed, 0x3a, 0xba, 0x26, 0xb1, 0xed, 0xbe, 0x94, 0x9e, 0xe2, 0x15,
	0x32, 0x60, 0x4e, 0xee, 0xfd, 0xd1, 0xea, 0xeb, 0xbe, 0x5a, 0x6a, 0x6b, 0x53, 0xa2, 0xd1, 0xec,
	0xaf, 0x70, 0xbd, 0x25, 0x2c, 0xcf, 0x5e, 0xcd, 0x6d, 0xa3, 0xdf, 0xc3, 0xdc, 0x43, 0xdf, 0x4c,
	0x45, 0xc6, 0x27, 0x9a, 0x9d, 0xf9, 0x06, 0x67, 0x5a, 0xaf, 0x4d, 0x9f, 0x39, 0xe3, 0xa5, 0x50,
	0x95, 0x9a, 0x09, 0x69, 0xdd, 0xb3, 0x5d, 0x91, 0xb4, 0xee, 0x13, 0xfa, 0x0f, 0xbc, 0xcd, 0xf5,
	0x36, 0xf0, 0x7b, 0xd3, 0xf5, 0xb8, 0xdb, 0x32, 0xd5, 0x17, 0xb0, 0xf2, 0x09, 0xa1, 0xb1, 0x91,
	0x7d, 0xec, 0x05, 0x91, 0xbc, 0x92, 0x28, 0x8c, 0x59, 0x65, 0xed, 0xda, 0x84, 0x48, 0x24, 0xbc,
	0xc3, 0x85, 0x3f, 0x40, 0x37, 0xa7, 0x0b, 0x9f, 0xa4, 0x62, 0xe8, 0x05, 0x2c, 0x7e, 0x19, 0x79,
	0x56, 0xe4, 0x39, 0xe8, 0x6a, 0x42, 0x3e, 0x6a, 0x94, 0x35, 0x25, 0x1b, 0x88, 0x44, 0xef, 0x70,
	0xd1, 0x26, 0xde, 0x9a, 0x2e, 0xea, 0x8f, 0xaa, 0xb0, 0xe7, 0xfe, 0x03, 0x94, 0xc4, 0x09, 0x07,
	0xba, 0x92, 0x39, 0xf2, 0x10, 0x8a, 0x57, 0xb3, 0x47, 0x21, 0x42, 0x70, 0x8d, 0x0b, 0x5e, 0xc5,
	0x48, 0x2e, 0x8c, 0x90, 0x63, 0x18, 0xb3, 0x19, 0x9f, 0x67, 0x75, 0x68, 0x40, 0x74, 0x67, 0x2a,
	0xff, 0xe4, 0xa3, 0x16, 0x7c, 0x83, 0xb3, 0xaf, 0x61, 0x25, 0xcb, 0x2e, 0x08, 0xd5, 0xdc, 0xf6,
	0x5e, 0x0e, 0x9d, 0xc1, 0xc2, 0xa8, 0x53, 0xa2, 0x75, 0x89, 0x6f, 0x82, 0x85, 0x66, 0xcb, 0x72,
	0x9f, 0x2b, 0xed, 0xe0, 0xcd, 0xe9, 0x0b, 0x17, 0x8e, 0x30, 0xb1, 0xa7, 0x73, 0xa0, 0x2a, 0x79,
	0xa6, 0x54, 0xa5, 0x59, 0x27, 0xcd, 0x2a, 0xee, 0x71, 0xc5, 0x6d, 0x7c, 0xf3, 0xb5, 0x8a, 0x31,
	0x8d, 0x58, 0x4c, 0x48, 0xad, 0x12, 0xd5, 0x52, 0xbb, 0x19, 0x77, 0xbd, 0xac, 0xd8, 0x16, 0x17,
	0xbb, 0x81, 0xd7, 0xa7, 0x8b, 0x31, 0xef, 0x64, 0x2a, 0x7f, 0x82, 0x39, 0xd9, 0x48, 0x25, 0xdf,
	0x98, 0xe0, 0xaf, 0x59, 0xa5, 0xdb, 0x5c, 0xe9, 0x26, 0xae, 0x4f, 0x57, 0xea, 0xb9, 0x91, 0xd6,
	0xe1, 0xcd, 0x47, 0xf1, 0xbf, 0x65, 0xbe, 0xcf, 0xe5, 0xfe, 0x99, 0xbf, 0xc2, 0xd6, 0xf7, 0xd8,
	0xa3, 0x47, 0x9e, 0xf3, 0x95, 0x76, 0xbf, 0xf3, 0xe0, 0xab, 0xcf, 0x3d, 0x93, 0xd8, 0xe1, 0x93,
	0x12, 0xff, 0xf7, 0xcb, 0xfe, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x58, 0x52, 0x25, 0x61, 0xdb,
	0x19, 0x00, 0x00,
}
