// Code generated by protoc-gen-go. DO NOT EDIT.
// source: namecom/transfers.proto

package namecom

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Transfer struct {
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
	Email      string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Status     string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Transfer) Reset()                    { *m = Transfer{} }
func (m *Transfer) String() string            { return proto.CompactTextString(m) }
func (*Transfer) ProtoMessage()               {}
func (*Transfer) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *Transfer) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *Transfer) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Transfer) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ListTransfersRequest struct {
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
	// Per Page is the number of records to return per request. Per Page defaults to 1,000.
	PerPage int32 `protobuf:"varint,2,opt,name=per_page" json:"per_page,omitempty"`
	// Page is which page to return
	Page int32 `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
}

func (m *ListTransfersRequest) Reset()                    { *m = ListTransfersRequest{} }
func (m *ListTransfersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTransfersRequest) ProtoMessage()               {}
func (*ListTransfersRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *ListTransfersRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *ListTransfersRequest) GetPerPage() int32 {
	if m != nil {
		return m.PerPage
	}
	return 0
}

func (m *ListTransfersRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ListTransfersResponse struct {
	Transfers []*Transfer `protobuf:"bytes,1,rep,name=transfers" json:"transfers,omitempty"`
	// Next_page is the identifier for the next page of results. It is only populated if there is another page of results after the current page.
	NextPage int32 `protobuf:"varint,2,opt,name=next_page" json:"next_page,omitempty"`
	// Last_page is the identifier for the final page of results. It is only populated if there is another page of results after the current page.
	LastPage int32 `protobuf:"varint,3,opt,name=last_page" json:"last_page,omitempty"`
}

func (m *ListTransfersResponse) Reset()                    { *m = ListTransfersResponse{} }
func (m *ListTransfersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTransfersResponse) ProtoMessage()               {}
func (*ListTransfersResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *ListTransfersResponse) GetTransfers() []*Transfer {
	if m != nil {
		return m.Transfers
	}
	return nil
}

func (m *ListTransfersResponse) GetNextPage() int32 {
	if m != nil {
		return m.NextPage
	}
	return 0
}

func (m *ListTransfersResponse) GetLastPage() int32 {
	if m != nil {
		return m.LastPage
	}
	return 0
}

type GetTransferRequest struct {
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
}

func (m *GetTransferRequest) Reset()                    { *m = GetTransferRequest{} }
func (m *GetTransferRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTransferRequest) ProtoMessage()               {}
func (*GetTransferRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *GetTransferRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

type CreateTransferRequest struct {
	DomainName     string  `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
	AuthCode       string  `protobuf:"bytes,2,opt,name=auth_code" json:"auth_code,omitempty"`
	PrivacyEnabled bool    `protobuf:"varint,3,opt,name=privacy_enabled" json:"privacy_enabled,omitempty"`
	PurchasePrice  float64 `protobuf:"fixed64,4,opt,name=purchase_price" json:"purchase_price,omitempty"`
	PromoCode      string  `protobuf:"bytes,5,opt,name=promo_code" json:"promo_code,omitempty"`
}

func (m *CreateTransferRequest) Reset()                    { *m = CreateTransferRequest{} }
func (m *CreateTransferRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTransferRequest) ProtoMessage()               {}
func (*CreateTransferRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *CreateTransferRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *CreateTransferRequest) GetAuthCode() string {
	if m != nil {
		return m.AuthCode
	}
	return ""
}

func (m *CreateTransferRequest) GetPrivacyEnabled() bool {
	if m != nil {
		return m.PrivacyEnabled
	}
	return false
}

func (m *CreateTransferRequest) GetPurchasePrice() float64 {
	if m != nil {
		return m.PurchasePrice
	}
	return 0
}

func (m *CreateTransferRequest) GetPromoCode() string {
	if m != nil {
		return m.PromoCode
	}
	return ""
}

type CreateTransferResponse struct {
	Transfer  *Transfer `protobuf:"bytes,1,opt,name=transfer" json:"transfer,omitempty"`
	Order     int32     `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
	TotalPaid float64   `protobuf:"fixed64,3,opt,name=total_paid" json:"total_paid,omitempty"`
}

func (m *CreateTransferResponse) Reset()                    { *m = CreateTransferResponse{} }
func (m *CreateTransferResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTransferResponse) ProtoMessage()               {}
func (*CreateTransferResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *CreateTransferResponse) GetTransfer() *Transfer {
	if m != nil {
		return m.Transfer
	}
	return nil
}

func (m *CreateTransferResponse) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *CreateTransferResponse) GetTotalPaid() float64 {
	if m != nil {
		return m.TotalPaid
	}
	return 0
}

type CancelTransferRequest struct {
	DomainName string `protobuf:"bytes,1,opt,name=domain_name" json:"domain_name,omitempty"`
}

func (m *CancelTransferRequest) Reset()                    { *m = CancelTransferRequest{} }
func (m *CancelTransferRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelTransferRequest) ProtoMessage()               {}
func (*CancelTransferRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *CancelTransferRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func init() {
	proto.RegisterType((*Transfer)(nil), "namecom.Transfer")
	proto.RegisterType((*ListTransfersRequest)(nil), "namecom.ListTransfersRequest")
	proto.RegisterType((*ListTransfersResponse)(nil), "namecom.ListTransfersResponse")
	proto.RegisterType((*GetTransferRequest)(nil), "namecom.GetTransferRequest")
	proto.RegisterType((*CreateTransferRequest)(nil), "namecom.CreateTransferRequest")
	proto.RegisterType((*CreateTransferResponse)(nil), "namecom.CreateTransferResponse")
	proto.RegisterType((*CancelTransferRequest)(nil), "namecom.CancelTransferRequest")
}

func init() { proto.RegisterFile("namecom/transfers.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 629 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xd5, 0x34, 0x4d, 0xbf, 0xe4, 0x46, 0x6d, 0xbf, 0x0e, 0x4d, 0x31, 0xe9, 0x0f, 0x91, 0xf9,
	0x51, 0x54, 0x89, 0x18, 0x0a, 0x6c, 0xba, 0x82, 0x16, 0x54, 0x09, 0x01, 0x42, 0xa6, 0x2b, 0x54,
	0x29, 0x9a, 0xda, 0x97, 0xd4, 0xc2, 0x9e, 0x19, 0xc6, 0x93, 0xaa, 0x15, 0xea, 0x06, 0xb1, 0xca,
	0x96, 0x4d, 0x1f, 0x80, 0x47, 0x20, 0x2f, 0xc1, 0x96, 0x1d, 0x6b, 0x1e, 0x04, 0x65, 0xec, 0x38,
	0x4e, 0xea, 0xb2, 0xa0, 0xbb, 0xf8, 0xdc, 0x3b, 0xe7, 0x9e, 0x33, 0xe7, 0x66, 0xe0, 0x3a, 0x67,
	0x11, 0x7a, 0x22, 0x72, 0xb4, 0x62, 0x3c, 0x7e, 0x8f, 0x2a, 0x6e, 0x4b, 0x25, 0xb4, 0xa0, 0xff,
	0xa5, 0x85, 0xc6, 0xea, 0xa8, 0x03, 0x23, 0xa9, 0x4f, 0x15, 0xc6, 0x52, 0xf0, 0x18, 0x93, 0xae,
	0xc6, 0x5a, 0x57, 0x88, 0x6e, 0x88, 0x0e, 0x93, 0x81, 0xc3, 0x38, 0x17, 0x9a, 0xe9, 0x40, 0xf0,
	0x94, 0xc3, 0xfe, 0x46, 0xa0, 0xb2, 0x9f, 0xf2, 0xd2, 0xc7, 0x50, 0xf3, 0x45, 0xc4, 0x02, 0xde,
	0x19, 0x12, 0x5a, 0xa4, 0x49, 0x5a, 0xd5, 0x9d, 0x6b, 0xfd, 0x81, 0x55, 0xc3, 0x13, 0x16, 0xc9,
	0x10, 0xdb, 0x42, 0x75, 0xcf, 0x07, 0x16, 0x71, 0xf3, 0x7d, 0xd4, 0x81, 0x32, 0x46, 0x2c, 0x08,
	0xad, 0x19, 0x73, 0xe0, 0x46, 0x7f, 0x60, 0x2d, 0x31, 0x3f, 0x0a, 0xf8, 0x93, 0xe9, 0x63, 0x49,
	0x1f, 0xbd, 0x0f, 0x73, 0xb1, 0x66, 0xba, 0x17, 0x5b, 0x25, 0x73, 0xc2, 0xea, 0x0f, 0xac, 0xff,
	0xdf, 0x20, 0xf7, 0x03, 0xde, 0x6d, 0x3e, 0x95, 0x52, 0x89, 0x63, 0x16, 0x9a, 0x03, 0x69, 0x9f,
	0x7d, 0x0a, 0xcb, 0x2f, 0x83, 0x58, 0x8f, 0x94, 0xc6, 0x2e, 0x7e, 0xec, 0x61, 0xac, 0xe9, 0x83,
	0x22, 0xc5, 0x8b, 0x53, 0x8a, 0x27, 0xd5, 0x36, 0xa0, 0x22, 0x51, 0x75, 0x24, 0xeb, 0xa2, 0x11,
	0x5c, 0x76, 0xb3, 0x6f, 0x4a, 0x61, 0xd6, 0xe0, 0x25, 0x83, 0x9b, 0xdf, 0xf6, 0x17, 0x02, 0xf5,
	0xa9, 0xd9, 0xc9, 0xfd, 0x52, 0x07, 0xaa, 0x59, 0x24, 0x16, 0x69, 0x96, 0x5a, 0xb5, 0xad, 0xa5,
	0x76, 0x1a, 0x45, 0x7b, 0xd4, 0xee, 0x8e, 0x7b, 0xe8, 0x1a, 0x54, 0x39, 0x9e, 0xe8, 0xfc, 0xec,
	0x31, 0x30, 0xac, 0x86, 0x2c, 0x4e, 0xab, 0x89, 0x82, 0x31, 0x60, 0xef, 0x01, 0xdd, 0xc3, 0x4c,
	0xc4, 0xbf, 0xfb, 0xb7, 0x7f, 0x11, 0xa8, 0xef, 0x2a, 0x64, 0x1a, 0xaf, 0x4e, 0x36, 0xd4, 0xcc,
	0x7a, 0xfa, 0xa8, 0xe3, 0x09, 0x3f, 0x71, 0x54, 0x75, 0xc7, 0x00, 0x6d, 0xc1, 0xa2, 0x54, 0xc1,
	0x31, 0xf3, 0x4e, 0x3b, 0xc8, 0xd9, 0x61, 0x88, 0xbe, 0xf1, 0x55, 0x71, 0xa7, 0x61, 0x7a, 0x17,
	0x16, 0x64, 0x4f, 0x79, 0x47, 0x2c, 0xc6, 0x8e, 0x54, 0x81, 0x87, 0xd6, 0x6c, 0x93, 0xb4, 0x88,
	0x3b, 0x85, 0xd2, 0x0d, 0x00, 0xa9, 0x44, 0x24, 0x92, 0x81, 0x65, 0x33, 0x30, 0x87, 0xd8, 0x67,
	0xb0, 0x32, 0xed, 0x2d, 0x0d, 0xeb, 0x1e, 0x54, 0x46, 0x41, 0x18, 0x67, 0x85, 0x59, 0x65, 0x2d,
	0x74, 0x19, 0xca, 0x42, 0xf9, 0xa8, 0xd2, 0x98, 0x92, 0x8f, 0xe1, 0x78, 0x2d, 0x34, 0x0b, 0x3b,
	0x92, 0x05, 0x89, 0x17, 0xe2, 0xe6, 0x10, 0xfb, 0x05, 0xd4, 0x77, 0x19, 0xf7, 0x30, 0xbc, 0xfa,
	0xd5, 0x6e, 0x7d, 0x2f, 0x41, 0x35, 0xdb, 0x39, 0x8a, 0x30, 0x3f, 0xb1, 0x84, 0x74, 0x3d, 0x53,
	0x5f, 0xf4, 0xc7, 0x68, 0x6c, 0x5c, 0x56, 0x4e, 0xae, 0xc3, 0xae, 0x7f, 0xfe, 0xf9, 0xfb, 0xeb,
	0xcc, 0x22, 0x9d, 0x77, 0x8e, 0x1f, 0x8d, 0x1f, 0x16, 0x7a, 0x08, 0xb5, 0xdc, 0x96, 0xd1, 0xd5,
	0x8c, 0xe5, 0xe2, 0xee, 0x35, 0x2e, 0xde, 0x9f, 0x7d, 0xcb, 0xb0, 0xae, 0xd3, 0xd5, 0x09, 0x56,
	0xe7, 0x53, 0xce, 0xd7, 0x19, 0xfd, 0x00, 0x0b, 0x93, 0x19, 0xd1, 0xb1, 0xd8, 0xc2, 0xc5, 0x6c,
	0xdc, 0xbc, 0xb4, 0x9e, 0xba, 0xb1, 0xcc, 0x5c, 0x6a, 0x4f, 0xba, 0xd9, 0x26, 0x9b, 0x54, 0xc0,
	0xc2, 0x64, 0x22, 0xf9, 0x61, 0x45, 0x51, 0x15, 0xd9, 0xda, 0x34, 0xf4, 0xb7, 0x6d, 0xfb, 0x2f,
	0xb6, 0xb6, 0x3d, 0xc3, 0xb6, 0x73, 0xe7, 0xdd, 0xe8, 0x59, 0x3e, 0x27, 0xe4, 0xc7, 0xcc, 0xca,
	0x6b, 0x16, 0xe1, 0x33, 0xa1, 0x77, 0x45, 0x74, 0xe0, 0x3e, 0x7f, 0xbb, 0x7f, 0xf0, 0x4a, 0xf8,
	0x18, 0xc6, 0x87, 0x73, 0xe6, 0xf9, 0x7d, 0xf8, 0x27, 0x00, 0x00, 0xff, 0xff, 0x98, 0xa9, 0xc0,
	0xbd, 0xdd, 0x05, 0x00, 0x00,
}
